image: node:16-slim

definitions:
  caches:
    npm: $HOME/.npm

  steps:
    - step: &scan-secrets
        name: Scan for secrets
        script:
          - pipe: atlassian/git-secrets-scan:0.5.1

    - step: &security-audit
        name: Run security audit
        caches:
          - npm
        script:
          - apt update && apt install -qq -y jq
          - npm audit --json > security-audit.json || true
          - >-
            if [ $(jq -c '.metadata.vulnerabilities | select(.high > 0)' security-audit.json | wc -c) -ne 0 ] || [ $(jq -c '.metadata.vulnerabilities | select(.critical > 0)' security-audit.json | wc -c) -ne 0 ]; then
              npm audit || true
              echo -e "Please refer to the logs for the full audit findings.\n`jq '.metadata' security-audit.json`" | node bitbucket-pipelines/add_audit_comment.js
            fi

    - step: &build
        name: "Build"
        caches:
          - npm
        script:
          # Add npm config
          - echo "@space48:registry=https://npm.pkg.github.com/" >> .npmrc
          - echo "//npm.pkg.github.com/:_authToken=${GITHUB_NPM_TOKEN}" >> .npmrc
          # Install dependencies, lint, build
          - npm ci
          - npm run build
          - npm run lint:ci
          
        artifacts:
          - .build/**
          - node_modules/**
          - .npmrc
          - dist/** #REMOVE

    - step: &test
        name: "Test"
        caches:
          - npm
        script:
          - npm run test

    - step: &tf-plan
        name: "Run terraform plan"
        caches:
          - npm
        script:
          # Install TF
          - ./bitbucket-pipelines/install_terraform.sh
          # Prepare creds for environment, Run plan, Add to PR
          - >-
            for target in staging production; do
              export ENVIRONMENT=$target
              export GCP_SERVICE_ACCOUNT=$([ $ENVIRONMENT = production ] && echo $GCP_SERVICE_ACCOUNT_PRODUCTION || echo $GCP_SERVICE_ACCOUNT_STAGING)
              ./bitbucket-pipelines/prepare_gcloud_credentials.sh
              export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"
              rm -rf .build/stacks
              node dist/bin/test-script.js
              if [ -f .build/dist/infra/main.js ]; then
                node .build/dist/infra/main.js
              fi
              for dir in $(find .build/stacks -mindepth 1 -maxdepth 1 -type d | sort); do
                terraform -chdir=$dir init
                terraform -chdir=$dir plan -no-color > plan.tmp
                cat plan.tmp
                cat plan.tmp >> plan.txt
              done
            done
          - echo -e "`cat plan.txt | grep 'Plan:'`\nPlease refer to the logs for the entire diff." | node bitbucket-pipelines/add_pr_comment.js
          - rm -rf $(pwd)/credentials.json

    - step: &deploy
        name: "Deploy"
        caches:
          - npm
        deployment: staging
        trigger: manual
        script:
          # Install TF
          - ./bitbucket-pipelines/install_terraform.sh
          # Prepare creds for environment, Apply plan
          - export ENVIRONMENT=$BITBUCKET_DEPLOYMENT_ENVIRONMENT
          - export GCP_SERVICE_ACCOUNT=$([ $ENVIRONMENT = production ] && echo $GCP_SERVICE_ACCOUNT_PRODUCTION || echo $GCP_SERVICE_ACCOUNT_STAGING)
          - ./bitbucket-pipelines/prepare_gcloud_credentials.sh
          - export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"
          - node dist/bin/test-script.js
          - >-
            if [ -f .build/dist/infra/main.js ]; then
              node .build/dist/infra/main.js
            fi
          - >-
            for dir in $(find .build/stacks -mindepth 1 -maxdepth 1 -type d | sort); do
              terraform -chdir=$dir init
              terraform -chdir=$dir plan -out=plan
              terraform -chdir=$dir apply plan
            done
          - npx ts-node ./bitbucket-pipelines/configure-bc-webhooks.ts
          - rm -rf $(pwd)/credentials.json

pipelines:
  pull-requests:
    "**":
      - step:
          <<: *scan-secrets
      - step:
          <<: *build
      - step:
          <<: *test
      - step:
          <<: *security-audit
      - step:
          <<: *tf-plan
      - step:
          <<: *deploy
          name: "Deploy to Staging"
          deployment: staging
      - step:
          <<: *deploy
          name: "Deploy to Production"
          deployment: production

  branches:
    master:
      - step:
          <<: *scan-secrets
      - step:
          <<: *build
      - step:
          <<: *test
      - step:
          <<: *deploy
          name: "Deploy to Staging"
          deployment: staging
          trigger: automatic
      - step:
          <<: *deploy
          name: "Deploy to Production"
          deployment: production
